{"version":3,"sources":["../../../../src/routes/application/blockchain/queries.js"],"names":["PostalPackage","require","updateDispatchSettlement","req","res","logger","trace","status","json","updatePackageSettlement","find","err","data","send","payload","packageId","newSettlementStatus","body","newStatus","postal","updateSettlementStatus","error","newData","packageHistory","history","getPackageHistory","query"],"mappings":"mLAAA,yC;AACA,6C;;AAEA,MAAM,EAAEA,aAAF,KAAoBC,QAAQ,mCAAR,CAA1B;;AAEA,MAAMC,2BAA2B,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7CC,mBAAOC,KAAP,CAAa,kCAAb;AACAF,MAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB;AACD,CAHD;;AAKA,MAAMC,0BAA0B,CAACN,GAAD,EAAMC,GAAN,KAAc;AAC5CC,mBAAOC,KAAP,CAAa,iCAAb;AACA;AACAN,gBAAcU,IAAd,CAAmB,EAAnB,EAAuB,aAAvB,EAAsC,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACzD;AACA,QAAID,GAAJ,EAAS;AACPP,UAAIS,IAAJ,CAAS,GAAT;AACD,KAFD,MAEO;AACL;AACA,YAAMC,UAAU;AACdC,mBAAWH,IADG;AAEdI,6BAAqBb,IAAIc,IAAJ,CAASC,SAFhB,EAAhB;AAGG;AACH,YAAMC,iBAAOC,sBAAP,CAA8BN,OAA9B,CAAN;AACA;AACAd,oBAAcU,IAAd,CAAmB,EAAEE,IAAF,EAAnB,EAA6B,CAACS,KAAD,EAAQC,OAAR,KAAoB;AAC/C,YAAID,KAAJ,EAAW;AACTjB,cAAIS,IAAJ,CAAS,GAAT;AACD,SAFD,MAEO;AACLT,cAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEc,OAAF,EAArB,EADK,CAC8B;AACpC;AACF,OAND;AAOD;AACF,GApBD;AAqBD,CAxBD;;AA0BA,MAAMC,iBAAiB,OAAOpB,GAAP,EAAYC,GAAZ,KAAoB;AACzCC,mBAAOC,KAAP,CAAa,wBAAb;AACA,QAAMkB,UAAU,MAAML,iBAAOM,iBAAP,CAAyBtB,IAAIuB,KAAJ,CAAUX,SAAnC,CAAtB;AACA;AACAX,MAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBgB,OAArB;AACD,CALD,C;;AAOStB,wB,GAAAA,wB,SAA0BO,uB,GAAAA,uB,SAAyBc,c,GAAAA,c","file":"queries.js","sourcesContent":["import logger from '../../../logger';\nimport postal from '../../../lib/postal';\n\nconst { PostalPackage } = require('../../../models/postalPackageData');\n\nconst updateDispatchSettlement = (req, res) => {\n  logger.trace('Entered updateDispatchSettlement');\n  res.status(200).json('');\n};\n\nconst updatePackageSettlement = (req, res) => {\n  logger.trace('Entered updatePackageSettlement');\n  // Connect to local database (PostalPackage) and grab packageUUID by using parameters given in swagger (packageId)\n  PostalPackage.find({}, 'packageUUID', async (err, data) => {\n    // add query parameters from front end\n    if (err) {\n      res.send(400);\n    } else {\n      // pass packageUUID and newSettlementStatus to postal\n      const payload = {\n        packageId: data,\n        newSettlementStatus: req.body.newStatus,\n      }; // need to add transformation logic\n      await postal.updateSettlementStatus(payload);\n      // once call to postal is complete grab updated package from database and send to front end\n      PostalPackage.find({ data }, (error, newData) => {\n        if (error) {\n          res.send(400);\n        } else {\n          res.status(200).json({ newData }); // need to add returned data transformation logic\n        }\n      });\n    }\n  });\n};\n\nconst packageHistory = async (req, res) => {\n  logger.trace('Entered packageHistory');\n  const history = await postal.getPackageHistory(req.query.packageId);\n  // may need to do some transformations on history\n  res.status(200).json(history);\n};\n\nexport { updateDispatchSettlement, updatePackageSettlement, packageHistory };\n"]}