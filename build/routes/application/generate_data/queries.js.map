{"version":3,"sources":["../../../../src/routes/application/generate_data/queries.js"],"names":["dispatchsimulator","DispatchSimulator","simulate","req","res","response","body","size","originPost","destinationPost","startDate","endDate","logger","debug","send","createpackage","updatepackage","status","end","error"],"mappings":";;AAEA;AACA,yC;AACA,iD;;AAEA,MAAMA,oBAAoB,IAAIC,kBAAJ,EAA1B;;AAEA;;;;;;;AAOA,MAAMC,WAAW,OAAOC,GAAP,EAAsBC,GAAtB,KAAyC;AACxD,MAAIC,WAAmB,EAAvB;AACA,MAAI;AACF,UAAM;AACJC,YAAM,EAAEC,IAAF,EAAQC,UAAR,EAAoBC,eAApB,EAAqCC,SAArC,EAAgDC,OAAhD,EADF;AAEFR,OAFJ;AAGAS,qBAAOC,KAAP,CAAc,iBAAgBN,IAAK,EAAnC;AACAF,eAAW,MAAML,kBAAkBE,QAAlB;AACfK,QADe;AAEfC,cAFe;AAGfC,mBAHe;AAIfC,aAJe;AAKfC,WALe,CAAjB;;;AAQA;AACAP,QAAIU,IAAJ,CAAS,sBAAT;AACA,UAAMd,kBAAkBe,aAAlB,CAAgCV,SAAS,CAAT,CAAhC,CAAN,CAfE,CAekD;AACpD,UAAML,kBAAkBgB,aAAlB,CAAgCX,SAAS,CAAT,CAAhC,CAAN,CAhBE,CAgBkD;;AAEpDD,QAAIa,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACdP,qBAAOO,KAAP;AACG,oEADH;AAEEA,SAFF;;AAIAf,QAAIU,IAAJ,CAAS,qCAAT;AACAV,QAAIa,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD;AACF,CA7BD,C;;AA+BehB,Q","file":"queries.js","sourcesContent":["/* @flow */\n\nimport { $Request, $Response } from 'express';\nimport logger from '../../../logger';\nimport DispatchSimulator from '../../../lib/simulate';\n\nconst dispatchsimulator = new DispatchSimulator();\n\n/**\n * This function handles the logic for the chatbot endpoint.\n * It returns the Watson Conversation response to the client.\n * @param  {$Request} req\n * @param  {$Response} res\n */\n\nconst simulate = async (req: $Request, res: $Response) => {\n  let response: Object = {};\n  try {\n    const {\n      body: { size, originPost, destinationPost, startDate, endDate },\n    } = req;\n    logger.debug(`Sending Size: ${size}`);\n    response = await dispatchsimulator.simulate(\n      size,\n      originPost,\n      destinationPost,\n      startDate,\n      endDate,\n    );\n\n    // res.send(response);\n    res.send('Simulation complete.');\n    await dispatchsimulator.createpackage(response[0]); // CreatePackage In BlockChain\n    await dispatchsimulator.updatepackage(response[1]); // Update Package In BlockChain\n\n    res.status(200).end();\n  } catch (error) {\n    logger.error(\n      `There was an error retrieving a response from SIMULATE DISPATH`,\n      error,\n    );\n    res.send('Was not able to get simulated data.');\n    res.status(500).end();\n  }\n};\n\nexport default simulate;\n"]}