{"version":3,"sources":["../../../../src/routes/application/database/queries.js"],"names":["viewReports","req","res","country","query","queryObj","$or","originPost","destinationPost","PostalPackage","find","err","postalData","send","status","data","msg","initializeDispatchObject","dispatchId","packageType","startDate","endDate","dateCreated","createDispatchIdArray","postalPackageData","dispatchIdArray","forEach","packageObject","includes","push","createArrayOfDispatches","dispatchIds","dispatches","dispatchPackageArray","filter","dispatch","performDispatchCalculations","reconciledStatus","resultArray","dispatchObject","reconciledPackages","reconciledWeight","unreconciledPackages","unreconciledWeight","logger","debug","settlementStatus","weight","totalReconciledPackages","totalReconciledWeight","totalUnreconciledPackages","totalUnreconciledWeight","report","body","info","JSON","stringify","reportData","packageReport"],"mappings":"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","file":"queries.js","sourcesContent":["import logger from '../../../logger';\nimport PostalPackage from '../../../models/postalPackageData';\n\nconst viewReports = (req, res) => {\n  const { country } = req.query;\n  const queryObj = {\n    $or: [{ originPost: country }, { destinationPost: country }],\n  };\n  PostalPackage.find(queryObj, (err, postalData) => {\n    if (err) {\n      res.send({ status: 'fail', data: { msg: err } });\n    } else {\n      res.send({ status: 'success', data: postalData });\n    }\n  });\n};\n\n// helper function to create Dispatch Object\n/* const queryObj = {\n  originPost: req.body.originPost,\n  destinationPost: req.body.destinationPost,\n  startDate: req.body.startDate,\n  endDate: req.body.endDate,\n  dateCreated: req.body.dateCreated,\n}; */\nconst initializeDispatchObject = (dispatchId, packageType, queryObj) => ({\n  dispatchId,\n  packageType,\n  originPost: queryObj.originPost,\n  destinationPost: queryObj.destinationPost,\n  startDate: queryObj.startDate,\n  endDate: queryObj.endDate,\n  dateCreated: queryObj.dateCreated,\n});\n\n// helper function to get an array of dispatchIds from all returned package data objects\nconst createDispatchIdArray = postalPackageData => {\n  const dispatchIdArray = [];\n  postalPackageData.forEach(packageObject => {\n    if (!dispatchIdArray.includes(packageObject.dispatchId)) {\n      dispatchIdArray.push(packageObject.dispatchId);\n    }\n  });\n  return dispatchIdArray;\n};\n\n// helper function that creates array of dispatch arrays. Each dispatch array contains all packages with that dispatchId\nconst createArrayOfDispatches = (dispatchIds, postalPackageData) => {\n  const dispatches = [];\n  dispatchIds.forEach(dispatchId => {\n    const dispatchPackageArray = postalPackageData.filter(\n      packageObject => packageObject.dispatchId === dispatchId,\n    );\n    const dispatch = {\n      dispatchId,\n      dispatchPackageArray,\n    };\n    dispatches.push(dispatch);\n  });\n  return dispatches;\n};\n\n// Perform all necessary calculations for front end application\nconst performDispatchCalculations = (dispatches, queryObj) => {\n  const reconciledStatus = ['Reconciled', 'SettlementAgreed'];\n  const resultArray = [];\n  dispatches.forEach(dispatch => {\n    // initialize variables that we will return\n    const dispatchObject = initializeDispatchObject(\n      dispatch.dispatchId,\n      dispatch.dispatchPackageArray[0].packageType,\n      queryObj,\n    );\n    let reconciledPackages = 0;\n    let reconciledWeight = 0;\n    let unreconciledPackages = 0;\n    let unreconciledWeight = 0;\n    dispatch.dispatchPackageArray.forEach(packageObject => {\n      logger.debug(\n        `Package settlement status is ${packageObject.settlementStatus}`,\n      );\n      if (reconciledStatus.includes(packageObject.settlementStatus)) {\n        reconciledPackages += 1;\n        reconciledWeight += packageObject.weight;\n      } else {\n        unreconciledPackages += 1;\n        unreconciledWeight += packageObject.weight;\n      }\n    });\n    dispatchObject.totalReconciledPackages = reconciledPackages;\n    dispatchObject.totalReconciledWeight = reconciledWeight;\n    dispatchObject.totalUnreconciledPackages = unreconciledPackages;\n    dispatchObject.totalUnreconciledWeight = unreconciledWeight;\n    resultArray.push(dispatchObject);\n  });\n  return resultArray;\n};\n\n// Get dispatch level report\nconst report = async (req, res) => {\n  const queryObj = {\n    originPost: req.body.originPost,\n    destinationPost: req.body.destinationPost,\n    startDate: req.body.startDate,\n    endDate: req.body.endDate,\n    dateCreated: req.body.dateCreated,\n  };\n  logger.info(`Input Params:${JSON.stringify(queryObj)}`);\n\n  PostalPackage.find(queryObj, (err, postalData) => {\n    if (err) {\n      res.send({ status: 'fail', data: { msg: err } });\n    } else {\n      logger.debug(`PostalData: ${JSON.stringify(postalData, null, 2)}`);\n      const dispatchIds = createDispatchIdArray(postalData);\n      logger.debug(`DispatchIds: ${JSON.stringify(dispatchIds, null, 2)}`);\n      const dispatches = createArrayOfDispatches(dispatchIds, postalData);\n      logger.debug(`Dispatches: ${JSON.stringify(dispatches, null, 2)}`);\n      const reportData = performDispatchCalculations(dispatches, queryObj); // final array to push completed dispatch data\n      res.send({ status: 'success', data: reportData });\n    }\n  });\n};\n\n// Get package details for dispatch\nconst packageReport = (req, res) => {\n  const queryObj = {\n    dispatchId: req.query.dispatchId,\n  };\n  PostalPackage.find(queryObj, (err, postalData) => {\n    if (err) {\n      res.send({ status: 'fail', data: { msg: err } });\n    } else {\n      res.send({ status: 'success', data: postalData });\n    }\n  });\n};\n\nexport { viewReports, report, packageReport };\n"]}