{"version":3,"sources":["../src/router.js"],"names":["router","Router","defaultEndpoint","req","res","render","message","mongoose","require","PostalPackage","vcapCredentials","connect","uri","createPackage","postalData","dispatchId","body","packageId","receptacleId","uniqueId","originPost","destinationPost","packageType","weight","currentStatus","settlementStatus","shipmentStatus","startDate","endDate","dateCreated","postal","save","err","result","send","status","data","updatePackage","findOneAndUpdate","$set","exec","logger","error","initializeDispatchObject","queryObj","createDispatchIdArray","postalPackageData","dispatchIdArray","forEach","packageObject","includes","push","createArrayOfDispatches","dispatchIds","dispatches","dispatchPackageArray","filter","dispatch","performDispatchCalculations","reconciledStatus","resultArray","dispatchObject","reconciledPackages","reconciledWeight","unreconciledPackages","unreconciledWeight","debug","totalReconciledPackages","totalReconciledWeight","totalUnreconciledPackages","totalUnreconciledWeight","report","info","JSON","stringify","find","msg","reportData","packageReport","query","viewReports","country","$or","get","post","login","updatePackageSettlement","updateDispatchSettlement","packageHistory","simulate"],"mappings":"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","file":"router.js","sourcesContent":["/* @flow */\nimport { Router } from 'express';\nimport logger from './logger';\nimport login from './routes/application/login/index';\nimport {\n  updateDispatchSettlement,\n  updatePackageSettlement,\n  packageHistory,\n} from './routes/application/blockchain/queries';\nimport simulate from './routes/application/generate_data/queries';\n\nconst router = new Router();\n\n// Register your routes and middleware to handle them here!!\nconst defaultEndpoint = (req, res) => {\n  res.render('homepagedesktop', { message: 'Home page' });\n};\n\n// Mongo DB start here\nconst mongoose = require('mongoose');\nconst { PostalPackage } = require('./models/postalPackageData');\n\n// load VCAP configuration  and service credentials\nconst vcapCredentials = require('./config/vcap-local.json');\n\nmongoose.connect(vcapCredentials.uri);\n// Create  Postal Data for package.\nconst createPackage = (req, res) => {\n  const postalData = {\n    dispatchId: req.body.dispatchId,\n    packageId: req.body.packageId,\n    receptacleId: req.body.receptacleId,\n    uniqueId: req.body.uniqueId,\n    originPost: req.body.originPost,\n    destinationPost: req.body.destinationPost,\n    packageType: req.body.packageType,\n    weight: req.body.weight,\n    currentStatus: req.body.currentStatus,\n    settlementStatus: req.body.settlementStatus,\n    shipmentStatus: req.body.shipmentStatus,\n    startDate: req.body.startDate,\n    endDate: req.body.endDate,\n    dateCreated: req.body.dateCreated,\n  };\n  const postal = new PostalPackage(postalData);\n  postal.save((err, result) => {\n    if (err) {\n      res.send({ status: 'fails', data: err });\n    } else {\n      res.send({ status: 'success', data: result });\n    }\n  });\n};\n\n// POST update package\nconst updatePackage = (req, res) => {\n  const { dispatchId, packageId, settlementStatus } = req.body;\n  PostalPackage.findOneAndUpdate(\n    { dispatchId, packageId },\n    { $set: { settlementStatus } },\n  ).exec(err => {\n    if (err) {\n      logger.error(err);\n      res.status(500).send(err);\n    } else {\n      res.status(200).send('package updated');\n    }\n  });\n};\n\n// helper function to create Dispatch Object\n/* const queryObj = {\n  originPost: req.body.originPost,\n  destinationPost: req.body.destinationPost,\n  startDate: req.body.startDate,\n  endDate: req.body.endDate,\n  dateCreated: req.body.dateCreated,\n}; */\nconst initializeDispatchObject = (dispatchId, packageType, queryObj) => ({\n  dispatchId,\n  packageType,\n  originPost: queryObj.originPost,\n  destinationPost: queryObj.destinationPost,\n  startDate: queryObj.startDate,\n  endDate: queryObj.endDate,\n  dateCreated: queryObj.dateCreated,\n});\n\n// helper function to get an array of dispatchIds from all returned package data objects\nconst createDispatchIdArray = postalPackageData => {\n  const dispatchIdArray = [];\n  postalPackageData.forEach(packageObject => {\n    if (!dispatchIdArray.includes(packageObject.dispatchId)) {\n      dispatchIdArray.push(packageObject.dispatchId);\n    }\n  });\n  return dispatchIdArray;\n};\n\n// helper function that creates array of dispatch arrays. Each dispatch array contains all packages with that dispatchId\nconst createArrayOfDispatches = (dispatchIds, postalPackageData) => {\n  const dispatches = [];\n  dispatchIds.forEach(dispatchId => {\n    const dispatchPackageArray = postalPackageData.filter(\n      packageObject => packageObject.dispatchId === dispatchId,\n    );\n    const dispatch = {\n      dispatchId,\n      dispatchPackageArray,\n    };\n    dispatches.push(dispatch);\n  });\n  return dispatches;\n};\n\n// Perform all necessary calculations for front end application\nconst performDispatchCalculations = (dispatches, queryObj) => {\n  const reconciledStatus = ['Reconciled', 'SettlementAgreed'];\n  const resultArray = [];\n  dispatches.forEach(dispatch => {\n    // initialize variables that we will return\n    const dispatchObject = initializeDispatchObject(\n      dispatch.dispatchId,\n      dispatch.dispatchPackageArray[0].packageType,\n      queryObj,\n    );\n    let reconciledPackages = 0;\n    let reconciledWeight = 0;\n    let unreconciledPackages = 0;\n    let unreconciledWeight = 0;\n    dispatch.dispatchPackageArray.forEach(packageObject => {\n      logger.debug(\n        `Package settlement status is ${packageObject.settlementStatus}`,\n      );\n      if (reconciledStatus.includes(packageObject.settlementStatus)) {\n        reconciledPackages += 1;\n        reconciledWeight += packageObject.weight;\n      } else {\n        unreconciledPackages += 1;\n        unreconciledWeight += packageObject.weight;\n      }\n    });\n    dispatchObject.totalReconciledPackages = reconciledPackages;\n    dispatchObject.totalReconciledWeight = reconciledWeight;\n    dispatchObject.totalUnreconciledPackages = unreconciledPackages;\n    dispatchObject.totalUnreconciledWeight = unreconciledWeight;\n    resultArray.push(dispatchObject);\n  });\n  return resultArray;\n};\n\n// Get dispatch level report\nconst report = async (req, res) => {\n  const queryObj = {\n    originPost: req.body.originPost,\n    destinationPost: req.body.destinationPost,\n    startDate: req.body.startDate,\n    endDate: req.body.endDate,\n    dateCreated: req.body.dateCreated,\n  };\n  logger.info(`Input Params:${JSON.stringify(queryObj)}`);\n\n  PostalPackage.find(queryObj, (err, postalData) => {\n    if (err) {\n      res.send({ status: 'fail', data: { msg: err } });\n    } else {\n      logger.debug(`PostalData: ${JSON.stringify(postalData, null, 2)}`);\n      const dispatchIds = createDispatchIdArray(postalData);\n      logger.debug(`DispatchIds: ${JSON.stringify(dispatchIds, null, 2)}`);\n      const dispatches = createArrayOfDispatches(dispatchIds, postalData);\n      logger.debug(`Dispatches: ${JSON.stringify(dispatches, null, 2)}`);\n      const reportData = performDispatchCalculations(dispatches, queryObj); // final array to push completed dispatch data\n      res.send({ status: 'success', data: reportData });\n    }\n  });\n};\n\n// Get package details for dispatch\nconst packageReport = (req, res) => {\n  const queryObj = {\n    dispatchId: req.query.dispatchId,\n  };\n  PostalPackage.find(queryObj, (err, postalData) => {\n    if (err) {\n      res.send({ status: 'fail', data: { msg: err } });\n    } else {\n      res.send({ status: 'success', data: postalData });\n    }\n  });\n};\n\n// Mongo DB changes end here\n\nconst viewReports = (req, res) => {\n  const { country } = req.query;\n  const queryObj = {\n    $or: [{ originPost: country }, { destinationPost: country }],\n  };\n  PostalPackage.find(queryObj, (err, postalData) => {\n    if (err) {\n      res.send({ status: 'fail', data: { msg: err } });\n    } else {\n      res.send({ status: 'success', data: postalData });\n    }\n  });\n  // res.status(200).json('');\n};\n\nrouter.get('/', defaultEndpoint);\n\nrouter.post('/login', login);\n\nrouter.get('/view-reports', viewReports);\n\nrouter.post('/report', report);\n\nrouter.get('/package-report', packageReport);\n\nrouter.post('/create-package', createPackage);\n\nrouter.post('/update-package', updatePackage);\n\nrouter.post('/update-package-settlement', updatePackageSettlement);\n\nrouter.post('/update-dispatch-settlement', updateDispatchSettlement);\n\nrouter.get('/package_history', packageHistory);\n\nrouter.post('/simulate', simulate);\n\nexport default router;\n"]}