{"version":3,"sources":["../../src/lib/postal.js"],"names":["cardname","workspace","Postal","constructor","bizNetworkConnection","BusinessNetworkConnection","init","logger","info","businessNetworkDefinition","connect","getIdentifier","on","evt","options","properties","key","err","debug","createPackage","payload","factory","getFactory","packageConcept","newConcept","packageId","dispatchId","receptacleId","weight","packageType","shipmentStatus","lastUpdated","settlementStatus","originCountry","newRelationship","destinationCountry","createPackageTransaction","newTransaction","package","packageUUID","submitTransaction","updateShipmentStatus","updateShipmentTransaction","packageIDs","newShipmentStatus","JSON","stringify","updateSettlementStatus","packageAsset","updateSettlementTransaction","newSettlementStatus","postal"],"mappings":"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","file":"postal.js","sourcesContent":["import { BusinessNetworkConnection } from 'composer-client';\nimport logger from '../logger';\n\nconst cardname = 'admin@postal';\nconst workspace = 'com.postal.scm';\n\nclass Postal {\n  /**\n   * Need to have the mapping from bizNetwork name to the URLs to connect to.\n   * bizNetwork name will be able to be used by Composer to get the suitable model files.\n   *\n   */\n  constructor() {\n    this.bizNetworkConnection = new BusinessNetworkConnection();\n  }\n\n  /**\n   * @description Initalizes the Postal by making a connection to the Composer runtime\n   * @return {Promise} A promise whose fullfillment means the initialization has completed\n   */\n  async init() {\n    logger.info(\n      `Attempting to connect to blockchain network using cardname: ${cardname}`,\n    );\n    try {\n      this.businessNetworkDefinition = await this.bizNetworkConnection.connect(\n        cardname,\n      );\n      logger.info(\n        'Postal:<init>',\n        'businessNetworkDefinition obtained',\n        this.businessNetworkDefinition.getIdentifier(),\n      );\n      logger.info('Subscribing to events');\n      this.bizNetworkConnection.on('event', evt => {\n        logger.info('New ShipmentPackageEvent', evt);\n        // eslint-disable-next-line no-unused-vars\n        const options = {\n          properties: { key: 'value' },\n        };\n      });\n    } catch (err) {\n      logger.debug(`Error initializinig business network definition: ${err}`);\n    }\n  }\n  async createPackage(payload) {\n    logger.info('Postal:<createPackage>');\n    logger.debug('Payload received:', payload);\n    const factory = this.businessNetworkDefinition.getFactory();\n\n    const packageConcept = factory.newConcept(workspace, 'Package');\n    packageConcept.packageId = payload.packageId;\n    packageConcept.dispatchId = payload.dispatchId;\n    packageConcept.receptacleId = payload.receptacleId;\n    packageConcept.weight = payload.weight;\n    packageConcept.packageType = payload.packageType;\n    packageConcept.shipmentStatus = payload.shipmentStatus;\n    packageConcept.lastUpdated = payload.lastUpdated;\n    packageConcept.settlementStatus = payload.settlementStatus;\n\n    const originCountry = factory.newRelationship(\n      workspace,\n      'Postal',\n      payload.originCountry,\n    );\n\n    const destinationCountry = factory.newRelationship(\n      workspace,\n      'Postal',\n      payload.destinationCountry,\n    );\n\n    packageConcept.originCountry = originCountry;\n    packageConcept.destinationCountry = destinationCountry;\n\n    logger.info('Creating Transaction');\n    const createPackageTransaction = factory.newTransaction(\n      workspace,\n      'createPackage',\n    );\n    createPackageTransaction.package = packageConcept;\n    createPackageTransaction.packageUUID = payload.packageUUID;\n\n    logger.info('Submitting Transaction');\n    await this.businessNetworkDefinition.submitTransaction(\n      createPackageTransaction,\n    );\n  }\n\n  async updateShipmentStatus(payload) {\n    logger.info('Postal:<updateShipmentStatus>');\n    const factory = this.businessNetworkDefinition.getFactory();\n    const updateShipmentTransaction = factory.newTransaction(\n      workspace,\n      'updateShipmentStatus',\n    );\n    updateShipmentTransaction.packageIDs = payload.packageIDs;\n    updateShipmentTransaction.lastUpdated = payload.lastUpdated;\n    updateShipmentTransaction.newShipmentStatus = payload.newShipmentStatus;\n\n    logger.info(\n      `UpdateShipmentTransaction: ${JSON.stringify(\n        updateShipmentTransaction,\n        null,\n        2,\n      )}`,\n    );\n\n    await this.businessNetworkDefinition.submitTransaction(\n      updateShipmentTransaction,\n    );\n  }\n\n  /*  payload: {\n                packageId: packageId,\n                newSettlementStatus: newSettlementStatus\n              } */\n  async updateSettlementStatus(payload) {\n    logger.info('Postal:<updateSettlementStatus>');\n    logger.debug('Payload received:', payload);\n    const factory = this.businessNetworkDefinition.getFactory();\n\n    const packageAsset = factory.newRelationship(\n      workspace,\n      'PackageAsset',\n      payload.packageUUID,\n    );\n    const updateSettlementTransaction = factory.newTransaction(\n      workspace,\n      'updateSettlementStatus',\n    );\n    updateSettlementTransaction.package = packageAsset;\n    updateSettlementTransaction.newSettlementStatus =\n      payload.newSettlementStatus;\n\n    logger.info('Submitting Transaction');\n    await this.businessNetworkDefinition.submitTransaction(\n      updateSettlementTransaction,\n    );\n  }\n}\n\nconst postal = new Postal();\nlogger.info('Initializing postal network controller');\npostal.init();\n\nexport default postal;\n"]}