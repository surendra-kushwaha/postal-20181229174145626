{"version":3,"sources":["../src/app.js"],"names":["require","app","use","stream","logger","set","origin","next","whitelist","process","env","CORS_ORIGIN","split","includes","credentials","bodyParser","urlencoded","extended","json","swaggerDocument","YAML","load","swaggerUi","serve","setup","router","pe","PrettyError","skipNodeFiles","skipPackage","withoutColors","start","err","req","res","stderr","write","render","express","static","__dirname","engine","renderFile"],"mappings":";;AAEA,kC;AACA,4B;AACA,0C;AACA,6C;AACA,yC;AACA,2C;AACA,sD;AACA,gC;AACA,gC;AACA,kC;AACA,kC;AACA,sC,6IAAmC;;AAEnCA,QAAQ,MAAR;;AAEA,MAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,sBAAO,UAAP,EAAmB,EAAEC,QAAQC,iBAAOD,MAAjB,EAAnB,CAAR;;AAEAF,IAAII,GAAJ,CAAQ,aAAR,EAAuB,UAAvB;;AAEAJ,IAAIC,GAAJ;AACE,oBAAK;AACHI,SAAOA,MAAP,EAAeC,IAAf,EAAqB;AACnB,UAAMC,YAAYC,QAAQC,GAAR,CAAYC,WAAZ;AACdF,YAAQC,GAAR,CAAYC,WAAZ,CAAwBC,KAAxB,CAA8B,GAA9B,CADc;AAEd,MAFJ;AAGAL,SAAK,IAAL,EAAWC,UAAUK,QAAV,CAAmBP,MAAnB,CAAX;AACD,GANE;AAOHQ,eAAa,IAPV,EAAL,CADF;;;;AAYAb,IAAIC,GAAJ,CAAQ,4BAAR;AACAD,IAAIC,GAAJ,CAAQ,6BAAR;AACAD,IAAIC,GAAJ,CAAQa,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAhB,IAAIC,GAAJ,CAAQa,qBAAWG,IAAX,EAAR;;AAEA,MAAMC,kBAAkBC,iBAAKC,IAAL,CAAU,cAAV,CAAxB;AACApB,IAAIC,GAAJ,CAAQ,UAAR,EAAoBoB,2BAAUC,KAA9B,EAAqCD,2BAAUE,KAAV,CAAgBL,eAAhB,CAArC;;AAEAlB,IAAIC,GAAJ,CAAQuB,gBAAR;;AAEA,MAAMC,KAAK,IAAIC,qBAAJ,EAAX;AACAD,GAAGE,aAAH;AACAF,GAAGG,WAAH,CAAe,SAAf;AACAH,GAAGI,aAAH,G,CAAoB;AACpBJ,GAAGK,KAAH,G,CAAY;;AAEZ9B,IAAIC,GAAJ,CAAQ,CAAC8B,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgB3B,IAAhB,KAAyB;AAC/BE,UAAQ0B,MAAR,CAAeC,KAAf,CAAqBV,GAAGW,MAAH,CAAUL,GAAV,CAArB;AACAzB;AACD,CAHD;;AAKA;AACA;AACA;;AAEA;AACAN,IAAIC,GAAJ,CAAQoC,kBAAQC,MAAR,CAAgB,GAAEC,SAAU,YAA5B,CAAR;AACAvC,IAAII,GAAJ,CAAQ,OAAR,EAAkB,GAAEmC,SAAU,YAA9B,E,CAA4C;AAC5CvC,IAAIwC,MAAJ,CAAW,MAAX,EAAmBzC,QAAQ,KAAR,EAAe0C,UAAlC;;AAEAzC,IAAII,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;;AAEeJ,G","file":"app.js","sourcesContent":["/* @flow */\n\nimport express from 'express';\nimport cors from 'cors';\nimport compression from 'compression';\nimport cookieParser from 'cookie-parser';\nimport bodyParser from 'body-parser';\nimport PrettyError from 'pretty-error';\nimport swaggerUi from 'swagger-ui-express';\nimport YAML from 'yamljs';\nimport morgan from 'morgan';\nimport router from './router';\nimport logger from './logger';\nimport postal from './lib/postal'; // eslint-disable-line no-unused-vars\n\nrequire('./db');\n\nconst app = express();\n\napp.use(morgan('combined', { stream: logger.stream }));\n\napp.set('trust proxy', 'loopback');\n\napp.use(\n  cors({\n    origin(origin, next) {\n      const whitelist = process.env.CORS_ORIGIN\n        ? process.env.CORS_ORIGIN.split(',')\n        : [];\n      next(null, whitelist.includes(origin));\n    },\n    credentials: true,\n  }),\n);\n\napp.use(compression());\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nconst swaggerDocument = YAML.load('swagger.yaml');\napp.use('/explore', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\napp.use(router);\n\nconst pe = new PrettyError();\npe.skipNodeFiles();\npe.skipPackage('express');\npe.withoutColors(); // So that logfile output is clean.\npe.start(); // Ensures that PrettyError is used app-wide.\n\napp.use((err, req, res, next) => {\n  process.stderr.write(pe.render(err));\n  next();\n});\n\n// const postal = new Postal();\n// postal.init();\n// postal.listen();\n\n// // *******remove these once Angular front end is written ********\napp.use(express.static(`${__dirname}/../public`));\napp.set('views', `${__dirname}/../public`); // __dirname is {workspace}/build\napp.engine('html', require('ejs').renderFile);\n\napp.set('view engine', 'html');\n\n// // ****************************************\n\nexport default app;\n"]}